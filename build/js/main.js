(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
exports.__esModule = true;
var DataStorage = /** @class */ (function () {
    function DataStorage() {
        this.storage = window.localStorage;
    }
    DataStorage.prototype.store = function (array, callback) {
        var data = JSON.stringify(array);
        var storeStatus = this.storage.setItem('taskData', data);
        if (storeStatus) {
            callback(true);
        }
        else {
            callback(false);
        }
    };
    DataStorage.prototype.read = function (callback) {
        var data = this.storage.getItem('taskData');
        var array = JSON.parse(data);
        callback(array);
    };
    return DataStorage;
}());
exports.DataStorage = DataStorage;
},{}],2:[function(require,module,exports){
"use strict";
exports.__esModule = true;
var ListView = /** @class */ (function () {
    function ListView(listId) {
        this.list = document.getElementById(listId);
    }
    ListView.prototype.render = function (items) {
        var _this = this;
        items.forEach(function (task) {
            var id = task.id;
            var name = task.name;
            var status = task.status;
            //template literal (new standard in javascript)
            var template = "<li id=\"" + id + "\" data-status=\"" + status + "\">\n                            <div class=\"task-container\">\n                                <div class=\"task-name\">" + name + "</div>\n                                <div class=\"task-buttons\">\n                                    <button type=\"button\" data-function=\"status\">&#x2714;</button>\n                                    <button type=\"button\" data-function=\"delete\">&times;</button>\n                                </div>\n                            </div>\n                            </li>";
            var fragment = document.createRange().createContextualFragment(template);
            _this.list.appendChild(fragment);
        });
    };
    ListView.prototype.clear = function () {
        this.list.innerHTML = '';
    };
    return ListView;
}());
exports.ListView = ListView;
},{}],3:[function(require,module,exports){
"use strict";
exports.__esModule = true;
var task_manager_1 = require("./task-manager");
var task_1 = require("./task");
var list_view_1 = require("./list-view");
var data_storage_1 = require("./data-storage");
//initialize
var taskArray = [];
var taskStorage = new data_storage_1.DataStorage();
var taskManager = new task_manager_1.TaskManager(taskArray);
var listView = new list_view_1.ListView('task-list');
// when screens loads
window.addEventListener('load', function () {
    var taskData = taskStorage.read(function (data) {
        if (data.length > 0) {
            data.forEach(function (item) {
                taskArray.push(item);
            });
            listView.clear();
            listView.render(taskArray);
            fixFooter();
        }
    });
});
// window listener in case of screen resize
window.addEventListener('resize', function () {
    fixFooter();
});
window.addEventListener('click', function () {
    fixFooter();
});
// reference to form
var taskform = document.getElementById('task-form');
taskform.addEventListener('submit', function (event) {
    event.preventDefault();
    var input = document.getElementById('task-input');
    var taskName = input.value;
    taskform.reset();
    if (taskName.length > 0) {
        var task = new task_1.Task(taskName);
        taskManager.add(task);
        listView.clear();
        taskStorage.store(taskArray, function (result) {
            if (result) {
                taskform.reset();
                listView.clear();
                listView.render(taskArray);
            }
            else {
                console.log("something wrong with storage!");
            }
        });
        listView.render(taskArray);
    }
});
var listElement = document.getElementById('task-list');
listElement.addEventListener('click', function (event) {
    var target = event.target;
    var id = getParentId(event.target);
    console.log(id);
    if (target.getAttribute('data-function') == 'status') {
        if (id) {
            taskManager.changeStatus(id, function () {
                taskStorage.store(taskArray, function () {
                    listView.clear();
                    listView.render(taskArray);
                });
            });
        }
    }
    if (target.getAttribute('data-function') == 'delete') {
        if (id) {
            taskManager["delete"](id, function () {
                taskStorage.store(taskArray, function () {
                    listView.clear();
                    listView.render(taskArray);
                });
            });
        }
    }
});
function getParentId(elm) {
    while (elm.parentNode) {
        elm = elm.parentNode;
        var id = elm.getAttribute('id');
        if (id) {
            return id;
        }
    }
    return null;
}
// change the css position style from fixed (no scroll in page) to relative (with scroll in page)
// 
function fixFooter() {
    var footer = document.getElementsByTagName("footer");
    if (footer.length != 0) {
        if (window.innerHeight < document.documentElement.scrollHeight) {
            footer[0].style.position = "relative";
            footer[0].style.padding = "0.1px 0";
        }
        else {
            footer[0].style.position = "fixed";
            footer[0].style.padding = "0";
        }
    }
}
},{"./data-storage":1,"./list-view":2,"./task":5,"./task-manager":4}],4:[function(require,module,exports){
"use strict";
exports.__esModule = true;
var TaskManager = /** @class */ (function () {
    function TaskManager(array) {
        this.tasks = array;
    }
    TaskManager.prototype.add = function (task) {
        this.tasks.push(task);
        console.log(this.tasks);
        this.sort(this.tasks);
    };
    TaskManager.prototype.changeStatus = function (id, callback) {
        this.tasks.forEach(function (task) {
            if (task.id === id) {
                if (task.status == false) {
                    task.status = true;
                }
                else {
                    task.status = false;
                }
            }
        });
        this.sort(this.tasks);
        callback();
    };
    TaskManager.prototype["delete"] = function (id, callback) {
        var index_to_remove = undefined;
        this.tasks.forEach(function (item, index) {
            if (item.id == id) {
                index_to_remove = index;
            }
        });
        if (index_to_remove !== undefined) {
            this.tasks.splice(index_to_remove, 1);
        }
        this.sort(this.tasks);
        callback();
    };
    TaskManager.prototype.sort = function (tasks) {
        tasks.sort(function (task1, task2) {
            if (task1.status == true && task2.status == false) {
                return 1;
            }
            if (task1.status == false && task2.status == true) {
                return -1;
            }
            if (task1.status == task2.status) {
                return 0;
            }
        });
    };
    return TaskManager;
}());
exports.TaskManager = TaskManager;
},{}],5:[function(require,module,exports){
"use strict";
exports.__esModule = true;
var Task = /** @class */ (function () {
    function Task(taskname) {
        this.name = taskname;
        this.id = new Date().getTime().toString(); // converted to string
        this.status = false;
        return this;
    }
    return Task;
}());
exports.Task = Task;
},{}]},{},[3])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
